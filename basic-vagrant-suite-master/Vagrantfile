# -*- mode: ruby -*-
# vi: ft=ruby :

require 'rbconfig'
require 'yaml'

VAGRANTFILE_API_VERSION = '2'

#########################################################
# Functions
#########################################################
# Print an error message and stop execution on handled errors
def handle_error(error_msg)
    puts "ERROR: #{error_msg}"
    exit
end

# host_name
def configure_hostname(host_count, host_type, idx)
    if host_count == 1
        hostname = "#{host_type}"
        template = "#{host_type}"
    else
        hostname = "#{host_type}-#{idx}"
        template = "#{host_type}-#{idx}"
    end
    return hostname, template
end


# Configure basic information a given node
def config_basic_info(node, hostname, box, box_version)
    node.vm.hostname = "#{hostname}.lago.local"
    node.vm.box = box
    node.vm.box_version = box_version
end

# Shell Provision
def shell_provision(node, command)
    node.vm.provision "shell", inline: command
end

# copy files
def file_copy(node, source, destination)
    node.vm.provision "file",
        source: source,
        destination: destination
end

# network options
def network_options( type, ip, network_name,dhcp_enable,forward_mode,domain_name)
    options = {}
    options[:ip] = ip
    options[:type] = type
    options[:libvirt__network_name] = network_name
    options[:libvirt__dhcp_enabled] = dhcp_enable
    options[:libvirt__forward_mode] = forward_mode
    options[:libvirt__domain_name] = domain_name

    options
end

## custom disks
def custom_disks(vm, host)
    if host.has_key?('disks')
        disks = host['disks']
        disks.each do |disk|
            options = {}
            if disk.has_key?('size')
                options[:size] = disk['size']
            end
            if disk.has_key?('type')
                options[:type] = disk['type']
            end
            if disk.has_key?('allow_existing')
                options[:allow_existing] = disk['allow_existing']
            end
            if disk.has_key?('bus')
                options[:bus]= disk['bus']
            end
            if disk.has_key?('device')
                options[:device] = disk['device']
            end
            vm.storage :file, options
        end
    end
end

# Convert the shell provisioner arguments from vagrant.yml
# into an array for the vagrant shell provisioner
def shell_provisioner_args(yaml_arguments)
    shell_arguments = Array.new

    # Arguments may or may not be named,
    # and named arguments may or may not have a value.
    yaml_arguments.each do |argument|
        argument.key?('name') && shell_arguments.push(argument['name'])
        argument.key?('value') && shell_arguments.push(argument['value'])
    end
    shell_arguments
end

## Deploy scripts
def deploy_scripts(node, host, type, suite_path, idx=0)

    if host.has_key?('deploy-script')
        scripts = host['deploy-script']
        scripts.each do |script|
            options = {}
            if script.has_key?('script')
                options[:script] = script['script']
                file_name = "#{suite_path}/" + File.dirname(options[:script]) + "/" +  File.basename(options[:script])
                run_script = 1
                file_copy(node,file_name, "/tmp/#{file_name}")
                if script.has_key?('arguments')
                    args = script['arguments']
                    args.each do |arg|
                        if arg.has_key?('first_host')
                            if type == "host" && idx != 0  && arg['first_host'] == 1
                                run_script = 0
                            end
                            if type == "host" && idx == 0  && arg['first_host'] == 0
                                run_script = 0
                            end
                        end
                    end
                end
                if run_script == 1
                    shell_provision(node, "/bin/sh  /tmp/#{file_name}")
                end
            end
        end
    end
end

###############################################################################
# Initialization
###############################################################################
# Verify that yml file exists
suite_path = ENV['SUITE'] || File.dirname(Dir.getwd)
root_dir = File.dirname(__FILE__)
vagrant_yaml_file = "#{suite_path}/vagrant_hosts.yml"
error_msg = "#{vagrant_yaml_file} does not exist"
handle_error(error_msg) unless File.exists?(vagrant_yaml_file)

suite_name = File.basename(ENV['SUITE']) || File.basename(Dir.getwd)
suite_name.gsub!('-','_')

# Load yml file
hosts = YAML.load_file(vagrant_yaml_file)

error_msg = "#{vagrant_yaml_file} exists, but is empty"
handle_error(error_msg) unless hosts

$vagrant_pool = (ENV['VAGRANT_POOL'] unless
                  (ENV['VAGRANT_POOL'].nil? or ENV['VAGRANT_POOL'].empty?))

######################################################
# Vagrant Configuration Loop
######################################################

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    ## Libvirt global configuration
    config.vm.provider :libvirt do |p|
        p.management_network_name = "vagrant-libvirt-#{suite_name}-management"
        p.management_network_address = '192.168.124.0/24'
        if $vagrant_pool then
            p.storage_pool_name = $vagrant_pool
        end

        # TODO: Take this info from the config and make it domain specific
        p.cpus = 2
        p.nested = true
        p.cpu_mode = "host-passthrough"
        #p.default_prefix = suite_name
    end

    ## Disable share folders
    config.vm.synced_folder '.', '/vagrant', disabled: true

    ## network configuration
    config.vm.network :private_network,
        network_options( "dhcp","192.168.29.0/24","vagrant-libvirt-#{suite_name}-extra", "true","nat","lago.local")
    config.vm.network :private_network,
        network_options( "dhcp","192.168.27.0/24","vagrant-libvirt-#{suite_name}-storage", "true","nat","")
    config.vm.network :private_network,
        network_options( "dhcp","192.168.28.0/24","vagrant-libvirt-#{suite_name}-bonding", "true","nat","")

      ## Configure the hosts from yml file
    hosts.each do |host|
        type = host['type']
        (0..host['hostCount']-1).each do |i|
            hostname, template = configure_hostname(host['hostCount'], type, i)
            config.vm.define "#{template}" do |node|
                #config_basic_info(node, "#{suite_name}_#{hostname}", host['box'],host['box_version'])
                config_basic_info(node, "#{hostname}", host['box'],host['box_version'])
                shell_provision(node, "echo hello from node #{i}")
                shell_provision(node, "echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config")
                root_authorized_key_cmd = "mkdir /root/.ssh
                    cp /home/vagrant/.ssh/authorized_keys /root/.ssh/authorized_keys
                    chmod 644 /root/.ssh/authorized_keys
                    chown root:root /root/.ssh/authorized_keys"
                shell_provision(node, root_authorized_key_cmd)

                # deploy scripts:
                deploy_scripts(node, host, type, suite_path, i)

                node.vm.provider :libvirt do |domain|
                    domain.memory = host['memory']
                    custom_disks(domain, host)
                end
            end
        end
    end
end
